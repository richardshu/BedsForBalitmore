var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../internal/net/Method", "../../internal/net/StitchAuthDocRequest"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Method_1 = __importDefault(require("../../internal/net/Method"));
    var StitchAuthDocRequest_1 = require("../../internal/net/StitchAuthDocRequest");
    var CoreStitchServiceClientImpl = (function () {
        function CoreStitchServiceClientImpl(requestClient, routes, name) {
            this.requestClient = requestClient;
            this.serviceRoutes = routes;
            this.serviceName = name;
        }
        CoreStitchServiceClientImpl.prototype.callFunction = function (name, args, decoder) {
            return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(name, args), decoder);
        };
        CoreStitchServiceClientImpl.prototype.getCallServiceFunctionRequest = function (name, args) {
            var body = { name: name };
            if (this.serviceName !== undefined) {
                body["service"] = this.serviceName;
            }
            body["arguments"] = args;
            var reqBuilder = new StitchAuthDocRequest_1.StitchAuthDocRequest.Builder();
            reqBuilder
                .withMethod(Method_1.default.POST)
                .withPath(this.serviceRoutes.functionCallRoute);
            reqBuilder.withDocument(body);
            return reqBuilder.build();
        };
        return CoreStitchServiceClientImpl;
    }());
    exports.default = CoreStitchServiceClientImpl;
});
//# sourceMappingURL=CoreStitchServiceClientImpl.js.map